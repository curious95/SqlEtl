<ScriptConfiguration>
  <!--
    {0}   = Schema
    {1}   = Prefix
    {2}   = Tablename/Tablewith suffix.
    {3}   = Encryption
  -->
  <Script Name="ExtractSchema">
    <![CDATA[
	set nocount on
    declare @table_owner  sysname ,@table_qualifier sysname 
	set @table_owner=null
	set @table_qualifier=null
    declare @table_id           int
    -- quotename() returns up to 258 chars
    declare @full_table_name    nvarchar(517) -- 258 + 1 + 258

    if @table_qualifier is not null
    begin
        if db_name() <> @table_qualifier
        begin   -- If qualifier doesn't match current database
            raiserror (15250, -1,-1)
            return
        end
    end

    if @table_owner is null
    begin   -- If unqualified table name
        select @full_table_name = quotename(@objname)
    end
    else
    begin   -- Qualified table name
        if @table_owner = ''
        begin   -- If empty owner name
            select @full_table_name = quotename(@table_owner)
        end
        else
        begin
            select @full_table_name = quotename(@table_owner) + '.' + quotename(@objname)
        end
    end

    select @table_id = object_id(@full_table_name)
	declare @pkey table(column_name sysname,key_seq bit)
	insert into @pkey(column_name,key_seq)
    select
        column_name = convert(sysname,c.name),1
	   from
        sys.indexes i,
        sys.all_columns c, 
        sys.all_objects o
    where
        o.object_id = @table_id and
        o.object_id = c.object_id and
        o.object_id = i.object_id and
         (i.is_primary_key = 1 or i.index_id = 1 ) and
        (c.name = index_col (@full_table_name, i.index_id,  1) or
         c.name = index_col (@full_table_name, i.index_id,  2) or
         c.name = index_col (@full_table_name, i.index_id,  3) or
         c.name = index_col (@full_table_name, i.index_id,  4) or
         c.name = index_col (@full_table_name, i.index_id,  5) or
         c.name = index_col (@full_table_name, i.index_id,  6) or
         c.name = index_col (@full_table_name, i.index_id,  7) or
         c.name = index_col (@full_table_name, i.index_id,  8) or
         c.name = index_col (@full_table_name, i.index_id,  9) or
         c.name = index_col (@full_table_name, i.index_id, 10) or
         c.name = index_col (@full_table_name, i.index_id, 11) or
         c.name = index_col (@full_table_name, i.index_id, 12) or
         c.name = index_col (@full_table_name, i.index_id, 13) or
         c.name = index_col (@full_table_name, i.index_id, 14) or
         c.name = index_col (@full_table_name, i.index_id, 15) or
         c.name = index_col (@full_table_name, i.index_id, 16))
    order by 1, 2

	declare	@dbname	sysname,@no varchar(35), @yes varchar(35), @none varchar(35)
	select @no = 'no', @yes = 'yes', @none = 'none'
	
	-- Make sure the @objname is local to the current database.
	select @dbname = parsename(@objname,3)
	if @dbname is null
		select @dbname = db_name()
	else if @dbname <> db_name()
		begin
			raiserror(15250,-1,-1)
			return
		end

	-- @objname must be either SYS.OBJECTS or systypes: first look in sysobjects
	declare @objid int,@sysobj_type char(2)
	select @objid = object_id, @sysobj_type = type FROM sys.all_objects WHERE object_id = object_id(@objname)

	-- DISPLAY COLUMN IF TABLE / VIEW
	if exists (select * FROM sys.all_columns WHERE object_id = @objid)
	begin

		-- SET UP NUMERIC TYPES: THESE WILL HAVE NON-BLANK PREC/SCALE
		declare @numtypes nvarchar(80)
		select @numtypes = N'tinyint,smallint,decimal,int,real,money,float,numeric,smallmoney'

		-- info for each column
		select
			name as 'column_name',
			type_name(user_type_id) as 'type',
			case when user_type_id=231 then convert(int, max_length)/2 else convert(int, max_length) end as 'length',
			case when is_nullable = 0 then @no else @yes end as 'nullable',is_primary=isnull(key_seq,0)
		from sys.all_columns left join @pkey on (name=column_name) WHERE object_id = @objid  and user_type_id<>189 and is_computed<>1
	end
]]>
  </Script>
  <Script Name="SelectChanges">
    <![CDATA[
with rows as (select row_number() over (order by  {5})as row,{4} from {2} c )
  select {4} from rows c where row between (@batchIndex - 1) * @batchSize + 1 and @batchIndex*@batchSize
   ]]>
  </Script>
  <Script Name="DisableAllTrigger">
    <![CDATA[ 
EXEC sp_MSforeachtable @command1="ALTER TABLE ? DISABLE TRIGGER ALL"
    ]]>
  </Script>
  <Script Name="EnableAllTrigger">
    <![CDATA[ 
EXEC sp_MSforeachtable @command1="ALTER TABLE ? ENABLE TRIGGER ALL"
    ]]>
  </Script>
  <Script Name="DisableConstraintCheck">
    <![CDATA[ 
EXEC sp_MSforeachtable @command1="ALTER TABLE ? NOCHECK CONSTRAINT ALL"
    ]]>
  </Script>
  <Script Name="EnableConstraintCheck">
    <![CDATA[ 
EXEC sp_MSforeachtable @command1="ALTER TABLE ? WITH CHECK CHECK CONSTRAINT ALL"
    ]]>
  </Script>
</ScriptConfiguration>